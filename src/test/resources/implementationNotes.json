[  
   {  
      "apiimplnote":[  
         {  
            "controllerName":"certified-product-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"The required 'versionId' parameter filters the certified products to those assigned to that version.",
                  "link":"getCertifiedProductsByVersionUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ACB and have administrative authority on the ACB that uploaded the product.",
                  "link":"getPendingCertifiedProductsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ACB and administrative authority on the ACB for each pending certified product is required.",
                  "link":"getPendingCertifiedProductByIdUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or have ROLE_ACB and administrative authority on the ACB for each pending certified product is required",
                  "link":"rejectPendingCertifiedProductUsingDELETE"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or have ROLE_ACB and administrative authority on the ACB for each pending certified product is required",
                  "link":"confirmPendingCertifiedProductUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or user uploading the file must have ROLE_ACB and administrative authority on the ACB(s) specified in the file",
                  "link":"uploadUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and have administrative authority on the ACB that certified the product",
                  "link":"updateCertifiedProductUsingPUT"
               }
            ]
         },
         {  
            "controllerName":"authentication-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"Specifically, the Authorization header must have a value of 'Bearer token-that-gets-returned'.",
                  "link":"authenticateJSONUsingPOST"
               }
            ]
         },
         {  
            "controllerName":"activity-controller",
            "endPointLink":[  
               {  
                  "implementationNote":" ROLE_ADMIN and ROLE_ONC may see activity for all certification bodies. ROLE_ACB can see their own information.",
                  "link":"activityForACBsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC may see activity for all certification bodies. ROLE_ACB can see their own information.",
                  "link":"activityForACBByIdUsingGET"
               },
               {  
                  "implementationNote":"Anonymous users are only allowed to see activity for public announcements. All other roles can see private and public announcements.",
                  "link":"activityForAnnouncementByIdUsingGET"
               },
               {  
                  "implementationNote":"Only ROLE_ADMIN or ROLE_ONC",
                  "link":"activityForApiKeysUsingGET"
               },
               {  
                  "implementationNote":" ROLE_ADMIN and ROLE_ONC may see activity for all testing labs. ROLE_ATL can see their own information.",
                  "link":"activityforATLsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC may see activity for all testing labs. ROLE_ATL can see their own information.",
                  "link":"activityForATLByIdUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB (specific to own ACB).",
                  "link":"activityForPendingCertifiedProductsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB (specific to own ACB).",
                  "link":"activityForPendingCertifiedProductByIdUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"activityByUserUsingGET_1"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"activityByUserUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, ROLE_CMS_STAFF (of ROLE_CMS_STAFF Users), ROLE_ACB (of their own), or ROLE_ATL (of their own).",
                  "link":"activityForUsersUsingGET_1"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, ROLE_CMS_STAFF (of ROLE_CMS_STAFF Users), ROLE_ACB (of their own), or ROLE_ATL (of their own).",
                  "link":"activityForUsersUsingGET"
               }
            ]
         },
         {  
            "controllerName":"announcement-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC can retrieve future scheduled announcements and private announcements. ROLE_ACB, ROLE_ATL, and ROLE_CMS_STAFF can retrieve private announcements. All users can retrieve public announcements.",
                  "link":"getAnnouncementsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"createUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC can retrieve future scheduled announcements and private announcements. ROLE_ACB, ROLE_ATL, and ROLE_CMS_STAFF can retrieve private announcements. All users can retrieve public announcements.",
                  "link":"getAnnouncementByIdUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ONC",
                  "link":"updateAnnouncementUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ONC",
                  "link":"deleteAnnouncementUsingDELETE"
               }
            ]
         },
         {  
            "controllerName":"api-key-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"listKeysUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"listActivityUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"listActivityByKeyUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC",
                  "link":"revokeUsingDELETE"
               }
            ]
         },
         {  
            "controllerName":"certification-body-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"All users can see all active ACBs.",
                  "link":"getAcbsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC",
                  "link":"createAcbUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB with administrative authority",
                  "link":"updateAcbUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or have administrative or read authority on the specified ACB",
                  "link":"getUsersUsingGET"
               },
               {  
                  "implementationNote":"must have ROLE_ADMIN or ROLE_ACB and have administrative authority on the specified ACB",
                  "link":"deleteUserFromAcbUsingDELETE"
               }
            ]
         },
         {  
            "controllerName":"developer-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, and ROLE_ACB can see deleted developers. Everyone else can only see active developers.",
                  "link":"getDevelopersUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB",
                  "link":"updateDeveloperUsingPUT"
               }
            ]
         },
         {  
            "controllerName":"product-controller",
            "endPointLink":[  
               {  
                  "implementationNote":" To merge: ROLE_ADMIN or ROLE_ONC. To update: ROLE_ADMIN, ROLE_ONC or ROLE_ACB.",
                  "link":"updateProductUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB",
                  "link":"splitProductUsingPOST"
               }
            ]
         },
         {  
            "controllerName":"product-version-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"Must have ROLE_ADMIN to merge or ROLE_ACB and have administrative authority on the specified ACB to do all actions except merge",
                  "link":"updateVersionUsingPUT"
               }
            ]
         },
         {  
            "controllerName":"scheduler-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and have administrative authority on the specified ACB",
                  "link":"getAllJobsUsingGET_1"
               },
                {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC or ROLE_ACB and have administrative authority on the specified ACB.",
                  "link":"updateJobUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and have administrative authority on the specified ACB.",
                  "link":"getAllTriggersUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB.",
                  "link":"createTriggerUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC or ROLE_ACB and have administrative authority on the specified ACB.",
                  "link":"updateTriggerUsingPUT"
               }
            ]
         },
         {  
            "controllerName":"search-view-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"updateFuzzyChoicesForSearchingUsingPUT"
               }
            ]
         },
         {  
            "controllerName":"job-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC",
                  "link":"getAllJobsUsingGET"
               }
            ]
         },
          {  
            "controllerName":"surveillance-report-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getAllAnnualReportsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"createAnnualReportUsingPOST"
               },
               {  
                  "implementationNote":"The associated ACB and year of the report cannot be changed. Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"updateAnnualReportUsingPUT"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getAnnualReportUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"deleteAnnualReportUsingDELETE"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"exportAnnualReportUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"exportQuarterlyReportUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getAllQuarterlyReportsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"createQuarterlyReportUsingPOST"
               },
               {  
                  "implementationNote":"The associated ACB, year, and quarter of the report cannot be changed. Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"updateQuarterlyReportUsingPUT"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getQuarterlyReportUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"deleteQuarterlyReportUsingDELETE"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getRelevantComplaintsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"getRelevantListingsUsingGET"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"updateRelevantListingUsingPUT"
               },
               {  
                  "implementationNote":"Security Restrictions: ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the report.",
                  "link":"updatePrivilegedSurveillanceDataUsingPUT"
               },
            ]
         },
         {  
            "controllerName":"surveillance-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the certified product is required.",
                  "link":"createSurveillanceUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the certified product is required",
                  "link":"getAllPendingSurveillanceUsingGET"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ACB and administrative authority on the ACB associated with the certified product is required",
                  "link":"confirmPendingSurveillanceUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the ACB(s) responsible for the product(s) in the file.",
                  "link":"uploadUsingPOST_1"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and associated with the certified product is required.",
                  "link":"updateSurveillanceUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ACB and have administrative authority on the specified ACB for each pending surveillance is required",
                  "link":"deleteSurveillanceUsingDELETE"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the associated ACB",
                  "link":"deleteNonconformityDocumentFromSurveillanceUsingDELETE"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ACB and administrative authority on the associated ACB.",
                  "link":"uploadNonconformityDocumentUsingPOST"
               }
            ]
         },
         {  
            "controllerName":"testing-lab-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN or ROLE_ONC to create a new testing lab",
                  "link":"createAtlUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ATL and have administrative authority on the testing lab whose data is being updated",
                  "link":"updateAtlUsingPUT"
               },
               {  
                  "implementationNote":"ROLE_ADMIN, ROLE_ONC, or ROLE_ATL and have administrative authority on the specified ATL",
                  "link":"deleteUserFromAtlUsingDELETE"
               }
            ]
         },
          {  
            "controllerName":"chpl-file-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"Retrieves the current API Documentation file.",
                  "link":"getApiDocumentationFileUsingGET"
               },
               {
                "implementationNote":"Uploads a new current API Documentation file. Security Restrictions: ROLE_ADMIN or ROLE_ONC",
                  "link":"uploadApiDocumentationUsingPOST"
               },
               {
                "implementationNote":"Retrieves the details about the current API Documentation file.",
                  "link":"getApiDocumentationFileDetailsUsingGET"
               }
            ]
         },
         {  
            "controllerName":"user-management-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC can see all users. ROLE_ACB, ROLE_ATL, and ROLE_CMS_STAFF can see their self.",
                  "link":"getUsersUsingGET_3"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC can invite users to any organization. ROLE_ACB and ROLE_ATL can add users to their own organization.",
                  "link":"inviteUserUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC",
                  "link":"deleteUserUsingDELETE"
               },
               {  
                  "implementationNote":"ROLE_ADMIN and ROLE_ONC",
                  "link":"authorizeUserUsingPOST"
               }
            ]
         },
         {  
            "controllerName":"change-request-controller",
            "endPointLink":[  
               {  
                  "implementationNote":"ROLE_DEVELOPER can get change requests where they have administrative authority based on the developer.",
                  "link":"getAllChangeRequestsUsingGET"
               },
               {  
                  "implementationNote":"ROLE_DEVELOPER can create change requests where they have administrative authority based on the developer.",
                  "link":"createChangeRequestUsingPOST"
               },
               {  
                  "implementationNote":"ROLE_DEVELOPER can get change requests where they have administrative authority based on the developer.",
                  "link":"getChangeRequestUsingGET"
               },
               {  
                  "implementationNote":"ROLE_DEVELOPER can update change requests where they have administrative authority based on the developer.",
                  "link":"updateChangeRequestUsingPUT"
               }
            ]
         }
      ]
   }
]
